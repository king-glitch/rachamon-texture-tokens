buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1+', changing: true
    }
}


plugins {
    id 'org.spongepowered.plugin' version '0.9.0'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}
group = 'dev.rachamon'
version = '0.0.1-SNAPSHOT'
sponge.plugin.id = 'rachamontexturetokens'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven {
        name = "forge"
        url = "https://files.minecraftforge.net/maven"
    }
    ivy {
        url "https://download.nodecdn.net/containers"
        layout "pattern", {
            artifacts {
                "/[organisation]/[module]/release/[revision]/[ext]"
            }
        }
    }

    flatDir {
        dir 'libs'
    }

}


apply plugin: 'net.minecraftforge.gradle'

minecraft {
    mappings channel: 'stable', version: '39-1.12'
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    shadow 'com.github.king-glitch:sponge-plugin-api:9440145'
    compile files('./libs/Pixelmon-1.12.2-8.3.6-server.jar')
    compile 'org.spongepowered:spongeapi:7.4.0'
    compileOnly 'net.minecraftforge:forge:1.12.2-14.23.5.2860'
    annotationProcessor 'org.spongepowered:spongeapi:7.4.0'
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

}


// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "rachamontexturetokens",
                "Specification-Version"   : project.version, // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

shadowJar {
    configurations = [project.configurations.shadow]


    exclude "**/module-info.class"
    exclude "**/overview.html"
    exclude "**/overviewj.html"
}

jar.finalizedBy('reobfJar')
